// Code generated by Prisma (prisma@1.30.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregatePlayer {
  count: Int!
}

type AggregateTeam {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserPrivateData {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createPlayer(data: PlayerCreateInput!): Player!
  updateManyPlayers(data: PlayerUpdateManyMutationInput!, where: PlayerWhereInput): BatchPayload!
  deleteManyPlayers(where: PlayerWhereInput): BatchPayload!
  createTeam(data: TeamCreateInput!): Team!
  updateManyTeams(data: TeamUpdateManyMutationInput!, where: TeamWhereInput): BatchPayload!
  deleteManyTeams(where: TeamWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createUserPrivateData(data: UserPrivateDataCreateInput!): UserPrivateData!
  updateManyUserPrivateDatas(data: UserPrivateDataUpdateManyMutationInput!, where: UserPrivateDataWhereInput): BatchPayload!
  deleteManyUserPrivateDatas(where: UserPrivateDataWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Player {
  api_id: Int!
  name: String!
  lastName: String!
  firstName: String!
}

type PlayerConnection {
  pageInfo: PageInfo!
  edges: [PlayerEdge]!
  aggregate: AggregatePlayer!
}

input PlayerCreateInput {
  api_id: Int!
  name: String!
  lastName: String!
  firstName: String!
}

type PlayerEdge {
  node: Player!
  cursor: String!
}

enum PlayerOrderByInput {
  api_id_ASC
  api_id_DESC
  name_ASC
  name_DESC
  lastName_ASC
  lastName_DESC
  firstName_ASC
  firstName_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PlayerPreviousValues {
  api_id: Int!
  name: String!
  lastName: String!
  firstName: String!
}

type PlayerSubscriptionPayload {
  mutation: MutationType!
  node: Player
  updatedFields: [String!]
  previousValues: PlayerPreviousValues
}

input PlayerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PlayerWhereInput
  AND: [PlayerSubscriptionWhereInput!]
  OR: [PlayerSubscriptionWhereInput!]
  NOT: [PlayerSubscriptionWhereInput!]
}

input PlayerUpdateManyMutationInput {
  api_id: Int
  name: String
  lastName: String
  firstName: String
}

input PlayerWhereInput {
  api_id: Int
  api_id_not: Int
  api_id_in: [Int!]
  api_id_not_in: [Int!]
  api_id_lt: Int
  api_id_lte: Int
  api_id_gt: Int
  api_id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  AND: [PlayerWhereInput!]
  OR: [PlayerWhereInput!]
  NOT: [PlayerWhereInput!]
}

type Query {
  players(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Player]!
  playersConnection(where: PlayerWhereInput, orderBy: PlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlayerConnection!
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team]!
  teamsConnection(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeamConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  userPrivateDatas(where: UserPrivateDataWhereInput, orderBy: UserPrivateDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserPrivateData]!
  userPrivateDatasConnection(where: UserPrivateDataWhereInput, orderBy: UserPrivateDataOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserPrivateDataConnection!
  node(id: ID!): Node
}

type Subscription {
  player(where: PlayerSubscriptionWhereInput): PlayerSubscriptionPayload
  team(where: TeamSubscriptionWhereInput): TeamSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  userPrivateData(where: UserPrivateDataSubscriptionWhereInput): UserPrivateDataSubscriptionPayload
}

type Team {
  api_id: Int!
  name: String!
}

type TeamConnection {
  pageInfo: PageInfo!
  edges: [TeamEdge]!
  aggregate: AggregateTeam!
}

input TeamCreateInput {
  api_id: Int!
  name: String!
}

type TeamEdge {
  node: Team!
  cursor: String!
}

enum TeamOrderByInput {
  api_id_ASC
  api_id_DESC
  name_ASC
  name_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TeamPreviousValues {
  api_id: Int!
  name: String!
}

type TeamSubscriptionPayload {
  mutation: MutationType!
  node: Team
  updatedFields: [String!]
  previousValues: TeamPreviousValues
}

input TeamSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TeamWhereInput
  AND: [TeamSubscriptionWhereInput!]
  OR: [TeamSubscriptionWhereInput!]
  NOT: [TeamSubscriptionWhereInput!]
}

input TeamUpdateManyMutationInput {
  api_id: Int
  name: String
}

input TeamWhereInput {
  api_id: Int
  api_id_not: Int
  api_id_in: [Int!]
  api_id_not_in: [Int!]
  api_id_lt: Int
  api_id_lte: Int
  api_id_gt: Int
  api_id_gte: Int
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  NOT: [TeamWhereInput!]
}

type User {
  battletag: String!
  userPrivateData: UserPrivateData!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  battletag: String!
  userPrivateData: UserPrivateDataCreateOneInput!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  battletag_ASC
  battletag_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  battletag: String!
}

type UserPrivateData {
  sub: String!
  provider: String!
  token: String!
}

type UserPrivateDataConnection {
  pageInfo: PageInfo!
  edges: [UserPrivateDataEdge]!
  aggregate: AggregateUserPrivateData!
}

input UserPrivateDataCreateInput {
  sub: String!
  provider: String!
  token: String!
}

input UserPrivateDataCreateOneInput {
  create: UserPrivateDataCreateInput
}

type UserPrivateDataEdge {
  node: UserPrivateData!
  cursor: String!
}

enum UserPrivateDataOrderByInput {
  sub_ASC
  sub_DESC
  provider_ASC
  provider_DESC
  token_ASC
  token_DESC
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPrivateDataPreviousValues {
  sub: String!
  provider: String!
  token: String!
}

type UserPrivateDataSubscriptionPayload {
  mutation: MutationType!
  node: UserPrivateData
  updatedFields: [String!]
  previousValues: UserPrivateDataPreviousValues
}

input UserPrivateDataSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserPrivateDataWhereInput
  AND: [UserPrivateDataSubscriptionWhereInput!]
  OR: [UserPrivateDataSubscriptionWhereInput!]
  NOT: [UserPrivateDataSubscriptionWhereInput!]
}

input UserPrivateDataUpdateDataInput {
  sub: String
  provider: String
  token: String
}

input UserPrivateDataUpdateManyMutationInput {
  sub: String
  provider: String
  token: String
}

input UserPrivateDataUpdateOneRequiredInput {
  create: UserPrivateDataCreateInput
  update: UserPrivateDataUpdateDataInput
  upsert: UserPrivateDataUpsertNestedInput
}

input UserPrivateDataUpsertNestedInput {
  update: UserPrivateDataUpdateDataInput!
  create: UserPrivateDataCreateInput!
}

input UserPrivateDataWhereInput {
  sub: String
  sub_not: String
  sub_in: [String!]
  sub_not_in: [String!]
  sub_lt: String
  sub_lte: String
  sub_gt: String
  sub_gte: String
  sub_contains: String
  sub_not_contains: String
  sub_starts_with: String
  sub_not_starts_with: String
  sub_ends_with: String
  sub_not_ends_with: String
  provider: String
  provider_not: String
  provider_in: [String!]
  provider_not_in: [String!]
  provider_lt: String
  provider_lte: String
  provider_gt: String
  provider_gte: String
  provider_contains: String
  provider_not_contains: String
  provider_starts_with: String
  provider_not_starts_with: String
  provider_ends_with: String
  provider_not_ends_with: String
  token: String
  token_not: String
  token_in: [String!]
  token_not_in: [String!]
  token_lt: String
  token_lte: String
  token_gt: String
  token_gte: String
  token_contains: String
  token_not_contains: String
  token_starts_with: String
  token_not_starts_with: String
  token_ends_with: String
  token_not_ends_with: String
  AND: [UserPrivateDataWhereInput!]
  OR: [UserPrivateDataWhereInput!]
  NOT: [UserPrivateDataWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  battletag: String
  userPrivateData: UserPrivateDataUpdateOneRequiredInput
}

input UserUpdateManyMutationInput {
  battletag: String
}

input UserWhereInput {
  battletag: String
  battletag_not: String
  battletag_in: [String!]
  battletag_not_in: [String!]
  battletag_lt: String
  battletag_lte: String
  battletag_gt: String
  battletag_gte: String
  battletag_contains: String
  battletag_not_contains: String
  battletag_starts_with: String
  battletag_not_starts_with: String
  battletag_ends_with: String
  battletag_not_ends_with: String
  userPrivateData: UserPrivateDataWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  battletag: String
}
`